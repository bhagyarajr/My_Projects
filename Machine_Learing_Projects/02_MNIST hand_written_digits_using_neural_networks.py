# -*- coding: utf-8 -*-
"""MNIST hand written digits using neural networks

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ErDv991WtiYJfp455xoKMt0PafJMeLc8
"""

import tensorflow as tf
from tensorflow import keras

from keras.datasets import mnist 
#from keras.preprocessing.image import load_img, array_to_img
from keras.utils.np_utils import to_categorical
from keras.models import Sequential 
from keras.layers import Dense

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

"""Load the data"""

(X_train, Y_train), (X_test,Y_test) = mnist.load_data()
mnist.load_data()

print("shape Of the X Training dataset is :",X_train.shape)
print("shape Of the Y Training dataset is :",Y_train.shape)
print("shape Of the X Testing dataset is :",X_test.shape)
print("shape Of the Y Testing dataset is :",Y_test.shape)

"""Understanding the image data format

"""

X_train[0]

plt.imshow(X_train[0],cmap= 'gray')

"""Preprocessing the image  data

"""

image_height,image_weight = 28,28

X_train = X_train.reshape(60000,image_height*image_weight)
X_test = X_test.reshape(10000,image_height*image_weight)

print(X_train[0])
X_train = X_train.astype('float')
X_test = X_test.astype('float')

X_train /=255.0
X_test /=255.0
print(X_test[0])

Y_train = to_categorical(Y_train,10)
Y_test = to_categorical(Y_test,10)

print(Y_train[0].shape)

model = Sequential()

model.add(Dense(512,activation='relu',input_shape=(784,)))
model.add(Dense(512,activation='relu'))
model.add(Dense(10,activation='softmax'))

"""Compile model"""

model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])

model.summary()

"""Train the model"""

model.fit(X_train,Y_train)

score = model.evaluate(X_test,Y_test)

print("Score of our model :",score)

"""Creating A CNN Model

"""

num_classes = 10
epochs = 3
X_train = X_train.reshape(60000,28,28,1)
X_test = X_test.reshape(10000,28,28,1)
X_train = X_train.astype('float')
X_test = X_test.astype('float')
X_train /=255.0
X_test /=255.0
Y_train = to_categorical(Y_train,num_classes)
Y_test = to_categorical(Y_test,num_classes)

print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)
print(Y_test.shape)

cnn = Sequential()

from keras.layers.convolutional.conv2d_transpose import Conv2D

cnn.add(Conv2D(32,kernel_size = (5,5),input_shape=(28,28,1),padding = 'same',activation = 'relu'))

from keras.layers.pooling.max_pooling2d import MaxPooling2D
cnn.add(MaxPooling2D())

cnn.add(Conv2D(64,kernel_size = (5,5),padding='same',activation='relu'))

cnn.add(MaxPooling2D())

#from keras.layers.reshaping.flatten import Flatten

cnn.add(Flatten())

cnn.add(Dense(1024,activation='relu'))

cnn.add(Dense(10,activation='softmax'))

cnn.compile(optimizer= 'adam',loss = 'categorical_crossentropy',metrics = ['accuracy'])

from keras.applications import vgg16
from keras.preprocessing import image